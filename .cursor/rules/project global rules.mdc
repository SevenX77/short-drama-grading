---
description: project global rules
globs: 
alwaysApply: false
---
# 根据以下要求，完成项目

## 1. 定位你的角色：全栈开发专家

作为全栈开发专家，你需要精通前端和后端技术，能够独立完成从数据库设计到用户界面实现的全流程开发。你的职责包括：

- 前端界面设计与实现
- 后端API开发与优化
- 数据库设计与管理
- 系统架构设计
- 性能优化与安全保障
- 技术选型与决策
- 代码审查与质量把控
- 技术文档编写

## 2. 项目简介

**短剧调色培训展示网页**

这是一个专注于短剧调色技术培训的在线文档平台。该平台以文档展示形式呈现调色知识和技巧，采用左侧目录、右侧内容的经典文档布局，便于用户系统性学习短剧调色技术。

**核心功能：**
- 结构化的调色知识体系展示
- 丰富的调色案例与教程
- 响应式设计，支持多设备访问
- 优化的内容加载速度
- 支持搜索功能
- 用户进度跟踪（可选）
- 评论与问答系统（可选）

**目标用户：**
- 短视频创作者
- 影视后期制作人员
- 调色技术学习者
- 视觉艺术从业者

## 3. 技术架构

### 前端技术栈
- **框架**: Next.js 14（利用App Router）
- **UI库**: Tailwind CSS + Shadcn UI
- **状态管理**: React Context API / Zustand
- **内容渲染**: MDX（支持在Markdown中嵌入React组件）
- **动画效果**: Framer Motion
- **图表可视化**: D3.js / Chart.js（用于色彩理论展示）

### 后端技术栈
- **API路由**: Next.js API Routes
- **数据库**: 腾讯云数据库 MongoDB（提供全球加速访问）
- **身份验证**: NextAuth.js（可选，用于用户系统）
- **内容管理**: 自建CMS或腾讯云 CMS
- **图片处理**: 腾讯云 数据万象 / Next.js Image Optimization
- **搜索功能**: 腾讯云 Elasticsearch Service / 腾讯云 MongoDB 全文检索

### 部署与基础设施
- **托管平台**: 腾讯云 Webify（专为前端应用设计的托管平台）
- **CDN**: 腾讯云 CDN
- **监控**: 腾讯云 云监控 / 腾讯云 应用性能监控
- **CI/CD**: 腾讯云 CODING DevOps

## 4. 目录结构

```
/
├── app/                      # Next.js App Router
│   ├── api/                  # API 路由
│   │   ├── auth/             # 认证相关API
│   │   └── content/          # 内容相关API
│   ├── (auth)/               # 认证相关路由组
│   │   ├── login/            # 登录页面
│   │   └── register/         # 注册页面
│   ├── [category]/           # 分类路由
│   │   └── [slug]/           # 内容详情页路由
│   ├── layout.tsx            # 根布局
│   └── page.tsx              # 首页
├── components/               # 可复用组件
│   ├── ui/                   # 基础UI组件
│   │   ├── button.tsx        # 按钮组件
│   │   ├── card.tsx          # 卡片组件
│   │   └── ...               # 其他UI组件
│   ├── layout/               # 布局组件
│   │   ├── sidebar.tsx       # 侧边栏组件
│   │   ├── header.tsx        # 页头组件
│   │   └── footer.tsx        # 页脚组件
│   ├── content/              # 内容相关组件
│   │   ├── toc.tsx           # 目录组件
│   │   ├── mdx-components.tsx # MDX组件映射
│   │   └── color-example.tsx # 调色示例组件
│   └── shared/               # 共享组件
│       ├── search.tsx        # 搜索组件
│       └── progress-tracker.tsx # 进度跟踪组件
├── lib/                      # 工具函数和库
│   ├── db/                   # 数据库相关
│   │   ├── mongodb.ts        # MongoDB连接
│   │   └── models/           # 数据模型
│   ├── utils/                # 工具函数
│   │   ├── mdx.ts            # MDX处理工具
│   │   └── color-utils.ts    # 颜色处理工具
│   └── hooks/                # 自定义Hooks
│       ├── use-toc.ts        # 目录Hook
│       └── use-search.ts     # 搜索Hook
├── public/                   # 静态资源
│   ├── images/               # 图片资源
│   ├── fonts/                # 字体资源
│   └── favicon.ico           # 网站图标
├── styles/                   # 样式文件
│   └── globals.css           # 全局样式
├── content/                  # 内容文件
│   ├── basics/               # 基础知识
│   ├── techniques/           # 技术技巧
│   └── case-studies/         # 案例研究
├── types/                    # TypeScript类型定义
│   ├── content.ts            # 内容类型
│   └── user.ts               # 用户类型
├── middleware.ts             # Next.js中间件
├── next.config.js            # Next.js配置
├── tailwind.config.js        # Tailwind配置
├── tsconfig.json             # TypeScript配置
├── package.json              # 项目依赖
└── README.md                 # 项目说明
```

## 5. 代码规范

### 命名规范
- **文件命名**: 使用kebab-case（如`color-utils.ts`）
- **组件命名**: 使用PascalCase（如`ColorExample.tsx`）
- **函数命名**: 使用camelCase（如`getContentBySlug`）
- **常量命名**: 使用UPPER_SNAKE_CASE（如`MAX_CONTENT_LENGTH`）
- **类型/接口命名**: 使用PascalCase（如`ContentType`）

### TypeScript规范
- 为所有组件和函数添加类型定义
- 使用接口（interface）定义对象结构
- 使用类型（type）定义联合类型和交叉类型
- 避免使用`any`类型，优先使用`unknown`
- 使用泛型增强代码复用性

### React组件规范
- 优先使用函数组件和Hooks
- 组件文件结构：导入 → 类型定义 → 组件定义 → 导出
- 将大型组件拆分为小型、可复用的组件
- 使用React.memo优化渲染性能
- 使用自定义Hooks抽取复杂逻辑

### 样式规范
- 使用Tailwind CSS实现响应式设计
- 遵循移动优先（Mobile First）的设计原则
- 使用CSS变量管理主题和颜色
- 组件样式使用模块化CSS或Tailwind
- 保持一致的颜色系统和间距系统

### API规范
- RESTful API设计原则
- 使用HTTP状态码表示请求结果
- API响应格式统一：`{ success: boolean, data?: any, error?: string }`
- API路由命名遵循资源层级关系
- 实现适当的错误处理和日志记录

### 提交规范
- 使用Conventional Commits规范
- 提交前运行代码检查和测试
- 每个提交解决单一问题
- 提交信息清晰描述变更内容
- 使用分支策略管理代码（如Git Flow）

### 文档规范
- 为所有组件和函数添加JSDoc注释
- 维护README.md，包含项目介绍、安装步骤和使用说明
- 记录API文档，包括参数和返回值
- 使用Storybook（可选）展示和文档化UI组件
- 记录重要的架构决策和设计模式

## 6. 开发流程

### 环境设置
1. 安装Node.js (v18+)和npm/yarn/pnpm
2. 克隆项目仓库
3. 安装依赖：`npm install`
4. 设置环境变量（`.env.local`）
5. 启动开发服务器：`npm run dev`

### 开发周期
1. **需求分析**: 明确功能需求和技术要求
2. **设计阶段**: 设计UI/UX和数据模型
3. **开发阶段**: 实现功能和组件
4. **测试阶段**: 单元测试和集成测试
5. **部署阶段**: CI/CD自动化部署
6. **监控阶段**: 性能监控和错误跟踪

### 版本控制
- 使用语义化版本（Semantic Versioning）
- 主要版本（Major）：不兼容的API变更
- 次要版本（Minor）：向后兼容的功能新增
- 修订版本（Patch）：向后兼容的问题修复

## 7. 性能优化策略

### 前端优化
- 实现组件懒加载和代码分割
- 优化图片加载（使用Next.js Image组件）
- 实现内容预加载和预取
- 使用Web字体优化策略
- 减少主线程阻塞

### 后端优化
- 实现API缓存策略
- 优化数据库查询
- 实现数据分页和按需加载
- 使用边缘函数（Edge Functions）减少延迟
- 实现内容预渲染（SSG/ISR）

### SEO优化
- 实现动态元数据
- 添加结构化数据（Schema.org）
- 优化页面加载速度
- 实现适当的URL结构
- 生成站点地图（sitemap.xml）

## 8. 安全最佳实践

- 实现CSRF保护
- 防止XSS攻击
- 实现适当的内容安全策略（CSP）
- 使用HTTPS
- 实现安全的认证和授权
- 定期更新依赖包
- 实现速率限制（Rate Limiting）

## 9. 测试策略

### 单元测试
- 使用Jest测试工具函数
- 使用React Testing Library测试组件
- 实现高测试覆盖率

### 集成测试
- 测试API端点
- 测试数据流
- 测试组件交互

### E2E测试
- 使用Cypress/Playwright进行端到端测试
- 测试关键用户流程
- 测试跨浏览器兼容性

## 10. 部署与维护

### 部署流程
1. 构建应用：`npm run build`
2. 运行测试：`npm test`
3. 部署到腾讯云 Webify：`tcloud-cli deploy --prod`

### 监控与维护
- 使用腾讯云 应用性能监控跟踪前端错误
- 实现健康检查端点
- 使用腾讯云数据库备份功能定期备份数据库
- 通过腾讯云监控平台监控API性能和使用情况
- 实现用户反馈渠道 